/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.etosha.contextualizer.tools;
 
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.JDialog;
import javax.swing.JTree;
import javax.swing.ToolTipManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author kamir
 */
public class DatasetInspectorFrame extends javax.swing.JFrame implements TreeSelectionListener {

    public static DatasetInspectorFrame frame = null;

    ClusterContext track = null;
    
    DefaultMutableTreeNode top = null;

    public void init() {

        frame = this;
        
        frame.track = new ClusterContext();
        
        frame.setLocation(0, 0);
        frame.setVisible(true);

    }

    /**
     * Creates new form MacroTrackerFrame
     */
    public DatasetInspectorFrame() {
        
        initComponents();

        init();
        
        top = new DefaultMutableTreeNode("Hybrid Context for Cluster & Cloud");

        DefaultTreeModel m = new DefaultTreeModel(top);
        this.jTree1.setModel(m);

        //Where the tree is initialized:
        this.jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        jTree1.addTreeSelectionListener(this);
        
        track.coreNodes.put("DEFAULT", top);
 
        ToolTipManager.sharedInstance().registerComponent(jTree1);
        TreeCellRenderer renderer = new ToolTipTreeCellRenderer();
        jTree1.setCellRenderer(renderer);

    }

    public void refresh() {

        for (int i = 0; i < jTree1.getRowCount(); i++) {
            jTree1.expandRow(i);
        }

        frame.jTree1.updateUI();
        frame.repaint();

    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(1366, 688));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setDividerSize(5);

        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jTabbedPane1.setToolTipText("");

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Properties", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setToolTipText("Scala code for loading this TSBucket ...");
        jScrollPane3.setViewportView(jTextArea2);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Code", jPanel4);

        jPanel5.setToolTipText("Result based on Sample data ...");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1253, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Preview", jPanel5);

        jSplitPane1.setRightComponent(jTabbedPane1);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Set Actions"));
        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        jButton2.setText("Remember profile");
        jButton2.setToolTipText("Persist current profile in private METASTORE ...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton2);

        jButton4.setText("refresh profile");
        jPanel8.add(jButton4);

        jButton3.setText("show profile");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton3);

        jButton1.setText("Publish profile");
        jButton1.setToolTipText("Make profile public available in shared METASTORE.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton1);

        jPanel1.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setSize(new java.awt.Dimension(840, 50));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Cluster or Cloud : ");
        jPanel6.add(jLabel1);

        jTextField1.setText("127.0.0.1");
        jTextField1.setPreferredSize(new java.awt.Dimension(184, 28));
        jPanel6.add(jTextField1);

        jButton5.setText("LOAD METADATA");
        jPanel6.add(jButton5);

        jButton11.setText("STORE METADATA");
        jPanel6.add(jButton11);

        jLabel2.setText("               ");
        jPanel6.add(jLabel2);

        jButton12.setText("Configure core data");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton12);

        jPanel2.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Services "));
        jPanel7.setPreferredSize(new java.awt.Dimension(866, 50));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jButton7.setText("HDFS Files");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton7);

        jButton10.setText("HBase Tables");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton10);

        jButton6.setText("Hive Tables");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton6);

        jButton8.setText("Kite Datasets");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton8);

        jButton9.setText("SOLR Collections");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton9);

        jPanel2.add(jPanel7, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1306, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel9, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 
    }//GEN-LAST:event_jButton3ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
        
        StringBuffer sb = new StringBuffer();
        
        Enumeration e = rootNode.preorderEnumeration();
        while (e.hasMoreElements()) {
            
            System.out.println();

            Object node = ((DefaultMutableTreeNode)e.nextElement()).getUserObject();

            boolean t = node instanceof ProcessComponent;
            // System.out.println(node + " is of type {ProcessComponent} " + t);

            if (t) {
                
                ProcessComponent c = (ProcessComponent) node;
                System.out.println( c.getCode() );
                sb.append( c.getCode() + "\n");
                
            }    
            
        }
        
        StringSelection selection = new StringSelection(sb.toString());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
       
         
//        e = rootNode.postorderEnumeration();
//        while (e.hasMoreElements()) {
//            System.out.println(e.nextElement());
//        }
//
//        e = rootNode.depthFirstEnumeration();
//        while (e.hasMoreElements()) {
//            System.out.println(e.nextElement());
//        }
 


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

                DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
        
        StringBuffer sb = new StringBuffer();
        
        Enumeration e = rootNode.preorderEnumeration();
        while (e.hasMoreElements()) {
            
            System.out.println();

            Object node = ((DefaultMutableTreeNode)e.nextElement()).getUserObject();

            boolean t = node instanceof ProcessComponent;
            // System.out.println(node + " is of type {ProcessComponent} " + t);

            if (t) {
                
                ProcessComponent c = (ProcessComponent) node;
                System.out.println( c.getCodeSCALA() );
                sb.append( c.getCode() + "\n");
                
            }    
            
        }
        
        StringSelection selection = new StringSelection(sb.toString());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
       

        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        
        track.addCoreNode( "HDFS", "HDFS inspection results ...");
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        track.addCoreNode( "Hive Metastore", "Hive table inspection results ...");
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        track.addCoreNode( "Kite SDK", "Kite-SDK inspection results ...");
        
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
        track.addCoreNode( "Cloudera Search", "Zookeeper inspection results ...");
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        track.addCoreNode( "HBase", "HBase master inspection results ...");
        
    }//GEN-LAST:event_jButton10ActionPerformed

    String smwURL = "www.semanpix.de/opedata/wiki/ETOSHA_DEV_CLUSTER";
    
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        System.out.println( "Metastore: " + smwURL );
        
    }//GEN-LAST:event_jButton12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatasetInspectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatasetInspectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatasetInspectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatasetInspectorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
        new DatasetInspectorFrame().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

 

    @Override
    public void valueChanged(TreeSelectionEvent e) {

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

        if (node == null) //Nothing is selected.     
        {
            return;
        }

        Object nodeInfo = node.getUserObject();

        boolean t = nodeInfo instanceof ProcessComponent;
        System.out.println(nodeInfo + " is of type {ProcessComponent} " + t);

        if (t) {
            ProcessComponent c = (ProcessComponent) nodeInfo;
            showInfo(c.inspect());
            showCodeSnippet(c.getCode());
 

        }

    }

    private void showInfo(String i) {
        jTextArea1.setText(i);
    }

    private void showCodeSnippet(String c) {
        jTextArea2.setText(c);
    }

}

class ClusterContext {

    /**
     * The base folder for all datasets ...
     */
    public static String TSBASE = "/TSBASE";

    // this tracks default tree noode, to hook it into the tool.
    public DefaultMutableTreeNode top = null;

    /** Core Nodes are:   
     * 
     * Hive Tables
     * HBase Tables
     * Kite Datasets
     * File (incl. Metadata from Hive)
     * Solr-Collections
     */
    Hashtable<String, DefaultMutableTreeNode> coreNodes = new Hashtable<String, DefaultMutableTreeNode>();
    
    // this tracks name => maps to its directory in the TSBASE
    String label = null;

    // this tracke node which represents it in the tree 
    DefaultMutableTreeNode trackNode = null;

    public ClusterContext() {    }

    String selectedCore = null;

    void addDataset(Object ds) {

        addNode(selectedCore, ds, (String)ds);

    }

    public void addCoreNode(String id, Object s) {

        
        DefaultMutableTreeNode core = new DefaultMutableTreeNode(s);

        DefaultMutableTreeNode s1 = coreNodes.get( "DEFAULT" );
        
        if (s1 != null) {
            s1.add(core);
            System.out.println("[OK] " + s + " :: Node added to tree. (ID:" + id + ")");
        } 
        else {

            System.out.println("{PROBLEM} " + s);

        }

        coreNodes.put(id, core);

    }
    
    public void addNode(String id, Object s, String label) {

        
        DefaultMutableTreeNode core = new DefaultMutableTreeNode(s);

        DefaultMutableTreeNode s1 = coreNodes.get( id );
        
        if (s1 != null) {
            s1.add(core);
            System.out.println("[OK] " + s + " :: Node added to tree (CORE: " + id + "). (ID:" + s + ")");
        } 
        else {

            System.out.println("{PROBLEM} " + s);

        }

        coreNodes.put(label, core);

    }

    /**
     * Initial node is "Collection" in track
     */
    private void createNodes() {

        DefaultMutableTreeNode source = null;

        trackNode = new DefaultMutableTreeNode("Track: " + label);
        top.add(trackNode);

//        source = new DefaultMutableTreeNode(new SourceTSB(this, "TRACK", "Collection"));
//        trackNode.add(source);
//
//        nodes.put("Collection", source);
    }

  

    Hashtable<String, JDialog> dialogs = new Hashtable<String, JDialog>();

    void _registerDialogToNode(String s, JDialog dialog) {

        dialogs.put(s, dialog);

    }

    void showDialog(String dialogKey) {
        
        Enumeration en = this.dialogs.keys();
        while( en.hasMoreElements() ) {
            System.out.println(">>> DIALOG: " + en.nextElement() );
        }
        
        System.out.println("OPEN WINDOW: " + dialogKey);
        dialogs.get(dialogKey).setVisible(true);
    }

}

interface ProcessComponent {

    public String inspect();

    public String getCode();
    
    public String getCodeSCALA();

    public String getDialogKey();

}




class ToolTipTreeCellRenderer implements TreeCellRenderer {

    DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();

    public ToolTipTreeCellRenderer() {
    }

    public Component getTreeCellRendererComponent(JTree tree, Object value,
            boolean selected, boolean expanded, boolean leaf, int row,
            boolean hasFocus) {
        renderer.getTreeCellRendererComponent(tree, value, selected, expanded,
                leaf, row, hasFocus);
        if (value != null) {
            Object tip;
            if (value instanceof DefaultMutableTreeNode) {
                tip = ((DefaultMutableTreeNode) value).getUserObject();

            } else {
                tip = tree.convertValueToText(value, selected, expanded,
                        leaf, row, hasFocus);
            }

            if (tip != null) {
                renderer.setToolTipText(tip.toString());
            } else {
                renderer.setToolTipText(null);
            }
        }
        return renderer;
    }
}
